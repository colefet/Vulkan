#version 450

//todo:common.h
struct Particle
{
	vec3 pos;
    float padding0;
	vec3 vel;
    float padding1;
	vec4 gradientUV;
};

layout (binding = 0) uniform UBOEmitter
{
	uint emitCount;
	float padding0;
	float padding1;
	int padding2;
} uEmitter;

//Particle storage buffer
layout(std140, binding = 1) buffer SSBOParticle 
{
    Particle particles[ ];
};
layout(std140, binding = 2) buffer SSBODead
{
    uint dead_list[ ];
};
layout(std140, binding = 3) buffer SSBOAlive
{
    uint alive_list[ ];
};
layout(std140, binding = 4) buffer SSBOAliveAfterSimulate
{
    uint alive_list_after_simulate[ ];
};
layout(std140, binding = 5) buffer SSBOCounter
{
    uint emitCount;
    uint deadCount;
    uint aliveCount;
    uint aliveCountAfterSimulate;
}ssboCounter;

layout (local_size_x = 256) in;
void main() 
{
    // Current SSBO index
    uint index = gl_GlobalInvocationID.x;
	// Don't try to write beyond particle count
    if (index >= ssboCounter.emitCount) {return;}

    // new particle index retrieved from dead list (pop):
    uint dead_count = atomicAdd(ssboCounter.deadCount,-1);
    uint newParticleIndex = dead_list[dead_count-1];

    // create new particle
    particles[newParticleIndex].pos = vec3(0,0,0);
    particles[newParticleIndex].vel = vec3(0,0,0);
	particles[newParticleIndex].gradientUV = vec4(0,0,0,0);

    // and add index to the alive list (push):
    uint alive_count = atomicAdd(ssboCounter.aliveCount,1);
    alive_list[alive_count]=newParticleIndex;
}

