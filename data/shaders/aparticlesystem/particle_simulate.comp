#version 450
#extension GL_GOOGLE_include_directive : enable
#include "particle_common.h"
#include "particle_simulate_param.h"

vec2 attraction(vec2 pos, vec2 attractPos) 
{
    vec2 delta = attractPos - pos;
	const float damp = 0.5;
    float dDampedDot = dot(delta, delta) + damp;
    float invDist = 1.0f / sqrt(dDampedDot);
    float invDistCubed = invDist*invDist*invDist;
    return delta * invDistCubed * 0.0035;
}

vec2 repulsion(vec2 pos, vec2 attractPos)
{
	vec2 delta = attractPos - pos;
	float targetDistance = sqrt(dot(delta, delta));
	return delta * (1.0 / (targetDistance * targetDistance * targetDistance)) * -0.000035;
}
 
layout (local_size_x = 256) in;
void main() 
{
    // Current SSBO index
    uint index = gl_GlobalInvocationID.x;
	// Don't try to write beyond particle count
    if (index >= ssboCounter.aliveCount) {return;}

    // simulation can be either fixed or variable timestep:
	//const float dt = xEmitterFixedTimestep >= 0 ? xEmitterFixedTimestep : g_xFrame_DeltaTime;
    const float dt = uboSimulate.deltaT;
    const float dt_speed = dt*0.05;

    uint particleIndex= 0;
    // Read position and velocity
    {//uint particleIndex = ssboAlive.list[index];
        uint alive_index = index;
        uint div_value = alive_index/4;
        uint mod_value = uint(mod(alive_index,4));
        particleIndex = GetVec4Element(ssboAlive.list[div_value],mod_value);
    }
    
    if(ssboParticle.particles[particleIndex].life > 0){
        vec3 vPos = ssboParticle.particles[particleIndex].pos.xyz;
        vec3 vVel = ssboParticle.particles[particleIndex].vel.xyz;

        //attractor
        /*vec3 destPos = vec2(uboSimulate.destX, uboSimulate.destY);
        vec2 delta = destPos - vPos;
        float targetDistance = sqrt(dot(delta, delta));
        vVel += repulsion(vPos, destPos.xy) * 0.05;*/

        // Move by velocity
        vPos += vVel * dt_speed;

        // collide with boundary
        /*if ((vPos.x < -1.0) || (vPos.x > 1.0) || (vPos.y < -1.0) || (vPos.y > 1.0)){
            vVel = (-vVel * 0.1) + attraction(vPos, destPos) * 12;
        }
        else{
            ssboParticle.particles[particleIndex].pos.xy = vPos;
        }*/

        // Write back
        ssboParticle.particles[particleIndex].life -= dt;
        ssboParticle.particles[particleIndex].pos.xyz = vPos;
        ssboParticle.particles[particleIndex].vel.xyz = vVel.xyz;
        ssboParticle.particles[particleIndex].param0.x += 0.02 * dt_speed;
        if (ssboParticle.particles[particleIndex].param0.x > 1.0){
            ssboParticle.particles[particleIndex].param0.x -= 1.0;
        }
        ssboParticle.particles[particleIndex].param0.y = GetParicleScale(particleIndex);  

        // add to new alive list:
        uint alive_count = atomicAdd(ssboCounter.aliveCountAfterSimulate,1);
        {//ssboAliveAfterSimulate.list[alive_count]=particleIndex;
            uint alive_index = alive_count;
            uint div_value = alive_index/4;
            uint mod_value = uint(mod(alive_index,4));
            //SetVec4Element(ssboAliveAfterSimulate.list[div_value],mod_value,particleIndex);
            //这段SetVec4提取成函数有bug，不管怎么尝试vec4中4个元素最终都只有一个有效元素，应该是数据存取规则没摸清楚
            uint value = particleIndex;
            if(mod_value==0){
                ssboAliveAfterSimulate.list[div_value].x = value;
            }else if(mod_value==1){
                ssboAliveAfterSimulate.list[div_value].y = value;
            }else if(mod_value==2){
                ssboAliveAfterSimulate.list[div_value].z = value;
            }else if(mod_value==3){
                ssboAliveAfterSimulate.list[div_value].w = value;
            }
        }

    }
    else{
        // add to dead list:
        uint dead_count = atomicAdd(ssboCounter.deadCount,1);
        {//ssboDead.list[dead_count]=particleIndex;
            uint dead_index = dead_count;
            uint div_value = dead_index/4;
            uint mod_value = uint(mod(dead_index,4));
            //SetVec4Element(ssboDead.list[div_value],mod_value,particleIndex);
            //这段SetVec4提取成函数有bug，不管怎么尝试vec4中4个元素最终都只有一个有效元素，应该是数据存取规则没摸清楚
            uint value = particleIndex;
            if(mod_value==0){
                ssboDead.list[div_value].x = value;
            }else if(mod_value==1){
                ssboDead.list[div_value].y = value;
            }else if(mod_value==2){
                ssboDead.list[div_value].z = value;
            }else if(mod_value==3){
                ssboDead.list[div_value].w = value;
            }
        }
    }
    
}

